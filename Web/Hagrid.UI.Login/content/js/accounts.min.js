/*
 accounts
 v1.0.0
 2020-12-13
*/

var accountsApp = angular.module('accountsApp', ['ngRoute', 'ngStorage', 'ngMessages', 'ngMask', 'accountsApp.constants', 'accountsApp.SystemMessages', 'ngSanitize']);

accountsApp.config(['$routeProvider', '$locationProvider', '$httpProvider', function ($routeProvider, $locationProvider, $httpProvider) {

    $routeProvider.when("/password/recovery/:token", {
        controller: "recoveryController",
        templateUrl: "/app/views/recovery.html"
    });

    $routeProvider.when("/password/change/:token", {
        controller: "changeController",
        templateUrl: "/app/views/change.html"
    });

    $routeProvider.when("/notfound", {
        controller: "notfoundController",
        templateUrl: "/app/views/notfound.html"
    });

    $routeProvider.when("/login/", {
        controller: "loginController",
        templateUrl: "/app/views/login.html"
    });

    $routeProvider.when("/login/:application", {
        controller: "loginController",
        templateUrl: "/app/views/login.html"
    });

    $routeProvider.when("/request-recovery/", {
        controller: "requestRecoveryController",
        templateUrl: "/app/views/request-recovery.html"
    });

    $routeProvider.when("/new-store/notification", {
        controller: "importNotificationController",
        templateUrl: "/app/views/import-notification.html"
    });

    $routeProvider.when("/new-store/notification/:store", {
        controller: "importNotificationController",
        templateUrl: "/app/views/import-notification.html"
    });

    $routeProvider.when("/new-store/password/recovery/:token", {
        controller: "recoveryController",
        templateUrl: "/app/views/recovery.html"
    });

    $routeProvider.when("/credit-card/:store/:phrase", {
        controller: "creditCardController",
        templateUrl: "/app/views/creditcard.html"
    });

    $routeProvider.when("/sms-recovery/", {
        controller: "smsRecoveryController",
        templateUrl: "/app/views/sms-recovery.html"
    });

    $routeProvider.when("/sms-validate/:token", {
        controller: "smsValidateController",
        templateUrl: "/app/views/sms-validate.html"
    });

    $routeProvider.when("/sms-change/", {
        controller: "smsChangeController",
        templateUrl: "/app/views/sms-change.html"
    });

    $routeProvider.otherwise({ redirectTo: "/notfound" });

    $httpProvider.defaults.headers.put['Content-Type'] = 'application/x-www-form-urlencoded';
    $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
    $httpProvider.interceptors.push('authInterceptorService');

}]);

accountsApp.directive('ngPasswordValidation', ['authService', '$location', function (authService, $location) {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, ele, attrs, c) {
            ele.on('blur', function () {
                if (c.$viewValue) {

                    var isCustomerImport = $location.url().indexOf('new-store') > -1;

                    authService.validatePassword(c.$viewValue, isCustomerImport).then(function (response) {

                        angular.forEach(c.$error, function (value, key) {
                            c.$setValidity(key, true);
                        });

                        if (response) {

                            angular.forEach(response, function (value, key) {
                                c.$setValidity(value, false);
                            });
                        }
                    },
                    function (err) {
                        c.$setValidity('generic', false);
                        console.log(err);
                    });
                }
            });
        }
    };
}]);

accountsApp.directive('ngPasswordConfirmation', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, ele, attrs, c) {
            ele.on('blur', function () {
                c.$setValidity('different', c.$viewValue == scope[attrs.ngPasswordConfirmation]);
            });
        }
    };
});

accountsApp.directive('ngSubmitValidation', function () {
    return {
        restrict: 'A',
        link: function (scope, ele, attrs, c) {
            ele.on('click', function () {

                if (scope[attrs.ngSubmitValidation].$invalid) {
                    angular.forEach(scope[attrs.ngSubmitValidation].$error, function (field) {
                        angular.forEach(field, function (errorField) {
                            errorField.$setTouched();
                        })
                    });
                }
            });
        }
    };
});

accountsApp.directive('ngLoadingButton', ['$http', function ($http) {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {

            element.on('click', function ($event) {

                scope.started = false;

                scope.isLoading = function () {
                    return $http.pendingRequests.length;
                };

                var unbindWatcher = scope.$watch(scope.isLoading, function (value) {
                    if (value == 1 && !scope.started) {
                        element.parent().append('<div id="loading-bar-spinner"><div class="spinner-icon"></div></div>');
                        element.addClass('ng-hide');
                        scope.started = true;
                    } else if (value == 0 && scope.started) {
                        element.parent().find('#loading-bar-spinner').remove();
                        element.removeClass('ng-hide');
                        scope.started = false;
                        unbindWatcher();
                    }
                });

            });
        }
    };
}]);

accountsApp.directive('numbersOnly', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attr, ngModelCtrl) {
            function fromUser(text) {
                if (text) {
                    var transformedInput = text.replace(/[^0-9]/g, '');

                    if (transformedInput !== text) {
                        ngModelCtrl.$setViewValue(transformedInput);
                        ngModelCtrl.$render();
                    }
                    return transformedInput;
                }
                return undefined;
            }
            ngModelCtrl.$parsers.push(fromUser);
        }
    };
});

accountsApp
    .filter('currentyear', function () {
        return function (x) {
            return new Date().getFullYear()
        };
    });

 angular.module('accountsApp.constants', [])

.constant('Config', {baseURI:'http://localhost:55888',clientId:'04CCCF35-534D-4BF9-A146-53638C054180'})

;
angular.module('accountsApp.SystemMessages', [])
    .constant('SystemMessages', {
        "email_document_required": { text: "É necessário preencher o E-mail ou Documento.", css: "alert-success" },
        "success_resend": { text: "Reenviado com sucesso.", css: "alert-success" },
        "expired_reset_token": { text: "Código expirado, por favor solicitar outro código de validação.", css: "alert-danger" },
        "email_different": { text: "E-mail e a confirmação de e-mail não combinam.", css: "alert-danger" },
        "password_different": { text: "Senha e a confirmação de senha não combinam.", css: "alert-danger" },
        "email_invalid": { text: "E-mail inválido", css: "alert-danger" },
        "OnlyAsterisk": { text: "Não pode ser formada somente por * (asterisco).", css: "alert-danger" },
        "EqualsToEmail": { text: "Não pode ser seu e-mail.", css: "alert-danger" },
        "Empty": { text: "Não pode estar em branco.", css: "alert-danger" },
        "WhiteSpace": { text: "Não pode conter espaços.", css: "alert-danger" },
        "InvalidChar": { text: "Possui caracteres inválidos.", css: "alert-danger" },
        "different": { text: "A confirmação e senha não batem.", css: "alert-danger" },
        "email": { text: "E-mail obrigatório", css: "alert-danger" },
        "invalid_token": { text: "Esse link de recuperação é inválido. Por favor, tente novamente.", css: "alert-danger" },
        "invalid_reset_token": { text: "Esse link de recuperação é inválido. Por favor, tente novamente.", css: "alert-danger" },
        "invalid_reset_code": { text: "Código inválido", css: "alert-danger" },
        "invalid_password": { text: "A senha não esta no padrão ou é inválida", css: "alert-danger" },
        "success": { text: "Alterado com sucesso", css: "alert-success" },
        "fail": { text: "Ocorreu algum problema durante a validação. Por favor, tente novamente.", css: "alert-danger" },
        "required": { text: "Campo obrigatório", css: "alert-danger" },
        "minlength": { text: "Não atingiu a quantidade mínima de caracteres", css: "alert-danger" },
        "maxlength": { text: "Atingiu a quantidade máxima de caracteres", css: "alert-danger" },
        "pattern": { text: "Valor inválido", css: "alert-danger" },
        "required_by_customer": { text: "Campo obrigatório", css: "alert-danger" },
        "required_password": { text: "Senha não informada", css: "alert-danger" },
        "required_new_password": { text: "Nova senha não informada", css: "alert-danger" },
        "min_length_new_password": { text: "Sua nova senha deve ter ao menos 8 caracteres", css: "alert-danger" },
        "required_confirm_password": { text: "Confirmação de senha não informada", css: "alert-danger" },
        "invalid_confirm_password": { text: "A confirmação de senha deve ser igual a nova senha", css: "alert-danger" },
        "invalid_email": { text: "E-mail inválido", css: "alert-danger" },
        "required_creditcard_number": { text: "Número do cartão de crédito não informado", css: "alert-danger" },
        "invalid_creditcard_number": { text: "Número do cartão de crédito inválido ou bandeira não aceita", css: "alert-danger" },
        "invalid_creditcard_brand": { text: "Número do cartão de crédito inválido ou bandeira não aceita", css: "alert-danger" },
        "invalid_length": { text: "Número do cartão de crédito inválido", css: "alert-danger" },
        "required_creditcard_holder_name": { text: "Nome do titular do cartão de crédito não informado", css: "alert-danger" },
        "required_document": { text: "Documento não informado", css: "alert-danger" },
        "invalid_document": { text: "Documento inválido", css: "alert-danger" },
        "required_creditcard_month": { text: "Mês de expiração do cartão de crédito não informado", css: "alert-danger" },
        "invalid_creditcard_month": { text: "Mês de expiração do cartão de crédito inválido", css: "alert-danger" },
        "required_creditcard_year": { text: "Ano de expiração do cartão de crédito não informado", css: "alert-danger" },
        "invalid_creditcard_year": { text: "Ano de expiração do cartão de crédito inválido", css: "alert-danger" },
        "required_cvv": { text: "Dígito verificador do cartão de crédito não informado", css: "alert-danger" },
        "required_address_location_name": { text: "Identificação do local não informado", css: "alert-danger" },
        "required_address_receiver_name": { text: "Nome do destinatário não informado", css: "alert-danger" },
        "required_zip_code": { text: "CEP não informado", css: "alert-danger" },
        "required_address": { text: "Endereço não informado", css: "alert-danger" },
        "required_address_number": { text: "Número não informado", css: "alert-danger" },
        "required_district": { text: "Bairro não informado", css: "alert-danger" },
        "required_city": { text: "Cidade não informada", css: "alert-danger" },
        "required_state": { text: "Estado não informado", css: "alert-danger" },
        "required_phone": { text: "Telefone não informado", css: "alert-danger" },
        "invalid_phone": { text: "Telefone inválido", css: "alert-danger" },
        "required_name": { text: "Nome não informado", css: "alert-danger" },
        "required_lastname": { text: "Sobrenome não informado", css: "alert-danger" },
        "required_name_pj": { text: "Razão social não informado", css: "alert-danger" },
        "required_fantasy_name": { text: "Nome fantasia não informado", css: "alert-danger" },
        "required_gender": { text: "É necessário informar o sexo", css: "alert-danger" },
        "required_birthday": { text: "Data de aniversário não informada", css: "alert-danger" },
        "invalid_birthday": { text: "Data de aniversário inválida", css: "alert-danger" }
    });


'use strict';
accountsApp
    .factory('applicationService', ApplicationService);

ApplicationService.$inject = ['$http', '$q', 'Config', '$sessionStorage'];

function ApplicationService($http, $q, $config, $sessionStorage) {

    var vm = this;
    vm.get = get;
    vm.info = info;

    function get(name) {

        var deferred = $q.defer();
        var errCallback = function (err) {
            delete $sessionStorage.AuthToken;
            deferred.reject(err);
        };

        $http.get($config.baseURI + '/v2/application/' + name).then(function (response) {
            deferred.resolve(response.data);
        },
            errCallback);

        return deferred.promise;
    }

    function info(application) {
        var result = {};
        var deferred = $q.defer();

        if (typeof ($sessionStorage.applications) !== 'undefined' &&
            ($sessionStorage.applications == application || typeof (application) == 'undefined'))
        {
            if ($sessionStorage.applications.informations.html_content)
                result.HtmlContent = $sessionStorage.applications.informations.html_content;

            if ($sessionStorage.applications.informations.image)
                result.Logo = $sessionStorage.applications.informations.image;

            result.Title = $sessionStorage.applications.informations.title;
            document.title = $sessionStorage.applications.informations.title;

            deferred.resolve(result);
        }
        else {

            if (typeof (application) !== 'undefined') {

                delete $sessionStorage.applications;

                get(application).then(function (response) {
                    if (typeof (response.content) !== 'undefined') {
                        $sessionStorage.applications = response.content;

                        if (typeof(response.content.informations) !== 'undefined') {

                            if (response.content.informations.html_content)
                                result.HtmlContent = response.content.informations.html_content;

                            if (response.content.informations.image)
                                result.Logo = response.content.informations.image;

                            result.Title = response.content.informations.title;
                            document.title = response.content.informations.title;
                        }
                    }

                    deferred.resolve(result);
                });
            }
            else
                deferred.resolve(result);
        }
        
        return deferred.promise;
    };

    return vm;
};
'use strict';
accountsApp.factory('authInterceptorService', ['$q', '$injector', '$location', '$sessionStorage', function ($q, $injector, $location, $sessionStorage) {

    var authInterceptorServiceFactory = {};

    authInterceptorServiceFactory.request = function (config) {

        config.headers = config.headers || {};

        var token = $sessionStorage.AuthToken;

        if (token) {
            config.headers.Authorization = 'Bearer ' + token.access_token;
        }

        return config;
    };

    return authInterceptorServiceFactory;
}]);
'use strict';

accountsApp.factory('authService', ['$http', '$q', '$sessionStorage', 'Config', function ($http, $q, $sessionStorage, Config) {

    var authServiceFactory = {};

    authServiceFactory.getClientCredentialToken = function () {
        var deferred = $q.defer();
        var errCallback = function (err) {
            delete $sessionStorage.AuthToken;
            deferred.reject(err);
        };

        var headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
        var data = "grant_type=client_credentials&client_id=" + Config.clientId;

        $http.post(Config.baseURI + '/token', data, headers).then(function (response) {

            $sessionStorage.AuthToken = response.data;
            $sessionStorage.$apply();

            deferred.resolve(response.data);
        },
        errCallback);

        return deferred.promise;
    }

    authServiceFactory.resetPasswordEmail = function (email, urlBack) {

        var deferred = $q.defer();
        var errCallback = function (err) { deferred.reject(err); };

        var headers = { 'Content-Type': 'application/x-www-form-urlencoded' };

        var data = 'email=' + email + '&url_back=' + urlBack;

        $http.post(Config.baseURI + '/v2/member/password-reset/email/', data, headers).then(function (response) {

            deferred.resolve(response.data); 
        },
        errCallback);

        return deferred.promise;
    };

    authServiceFactory.resetPasswordToken = function (token) {

        var deferred = $q.defer();
        var errCallback = function (err) { deferred.reject(err); };

        var headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
        var data = 'grant_type=reset_password&reset_token=' + token + '&client_id=' + Config.clientId;

        if (!$sessionStorage.AuthToken) {

            $http.post(Config.baseURI + '/token', data, headers).then(function (response) {

                $sessionStorage.AuthToken = response.data;
                deferred.resolve(response.data);
            },
            errCallback);
        }
        else {
            deferred.resolve($sessionStorage.AuthToken);
        }

        return deferred.promise;
    };

    authServiceFactory.resetPassword = function (newPassword, isCustomerImport) {

        var deferred = $q.defer();
        var errCallback = function (err) { deferred.reject(err); };

        var headers = { 'Content-Type': 'application/x-www-form-urlencoded' };

        var newPwd = encodeURIComponent(newPassword);
        var data = 'password=' + newPwd;

        var route = isCustomerImport ? '/member-import/password-reset' : '/member/password-reset';

        $http.post(Config.baseURI + route, data, headers).then(function (response) {
            deferred.resolve(response.data);
        },
        errCallback);

        return deferred.promise;
    };

    authServiceFactory.changePasswordToken = function (token) {

        var deferred = $q.defer();
        var errCallback = function (err) { deferred.reject(err); };

        var headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
        var data = 'grant_type=change_password&change_token=' + token + '&client_id=' + Config.clientId;

        $http.post(Config.baseURI + '/token', data, headers).then(function (response) {

            $sessionStorage.AuthToken = response.data;
            deferred.resolve(response.data);
        }, 
        errCallback);

        return deferred.promise;
    };

    authServiceFactory.changePassword = function (password, newPassword) {

        var deferred = $q.defer();
        var errCallback = function (err) { deferred.reject(err); };

        var headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
        var newPwd = encodeURIComponent(newPassword);
        var pwd = encodeURIComponent(password);
         
        var data = 'password=' + pwd + '&password_new=' + newPwd;

        $http.post(Config.baseURI + '/member/password-change', data, headers).then(function (response) {
            deferred.resolve(response.data);
        },
        errCallback);

        return deferred.promise;
    };

    authServiceFactory.validatePassword = function (newPassword, isCustomerImport) {

        var deferred = $q.defer();
        var errCallback = function (err) { deferred.reject(err); };

        var headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
        var newPwd = encodeURIComponent(newPassword);

        var data = 'password=' + newPwd;

        var route = isCustomerImport ? '/member-import/password-validate' : '/member/password-validate';

        $http.post(Config.baseURI + route, data, headers).then(function (response) {
            if (isCustomerImport)
                deferred.resolve(response.data.content);
            else
                deferred.resolve(response.data);
        },
        errCallback);

        return deferred.promise;
    };

    authServiceFactory.login = function (user, password) {

        var deferred = $q.defer(); 
        var errCallback = function (err) {

            delete $sessionStorage.AuthToken;

            deferred.reject(err);
        };

        var pwd = encodeURIComponent(password);

        var headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
        var data = "grant_type=password&username=" + user + "&password=" + pwd + "&client_id=" + Config.clientId;

        $http.post(Config.baseURI + '/token', data, headers).then(function (response) {

            $sessionStorage.AuthToken = response.data;
            $sessionStorage.$apply();

            deferred.resolve(response.data);
        },
        errCallback);

        return deferred.promise;

    };

    authServiceFactory.transferToken = function (memberToken) {

        var deferred = $q.defer();
        var errCallback = function (err) {

            deferred.reject(err);
        };

        $http.get(Config.baseURI + '/v2/member/get-transfer-token').then(function (response) {

            deferred.resolve(response.data);
        },
        errCallback);

        return deferred.promise;
    };

    return authServiceFactory;
}]);
'use strict';
accountsApp.factory('configService', ['$http', '$q', '$sessionStorage', function ($http, $q, $sessionStorage) {

    var configServiceFactory = {};

    configServiceFactory.Load = function () {

        var deferred = $q.defer();

        $http.get('../app/config.json', { responseType: 'json' }).then(function (response) {

            deferred.resolve(response.data);
        },
        function (err) {

            deferred.resolve({
                "baseURI": "http://localhost:55888",
                "clientId": "04CCCF35-534D-4BF9-A146-53638C054180"
            });
        });

        return deferred.promise;
    };

    configServiceFactory.Current = function () {

        var deferred = $q.defer();

        if ($sessionStorage.Config) {
            deferred.resolve($sessionStorage.Config);
        }
        else {
            configServiceFactory.Load().then(function (response) {

                $sessionStorage.Config = response;
                deferred.resolve(response);
            },
            function (err) {

                deferred.reject(err);
            });
        }

        return deferred.promise;
    };

    return configServiceFactory;

}]);
'use strict';
accountsApp.factory('creditCardService', ['$http', '$q', 'Config', function ($http, $q, Config) {

    var creditCardService = {};

    creditCardService.save = function (creditcard) {

        var deferred = $q.defer();
        var errCallback = function (err) { deferred.reject(err); };

        $http.defaults.headers.post['Content-Type'] = 'application/json';
        $http.post(Config.baseURI + '/v2/store-credit-card', creditcard).then(function (response) {
            deferred.resolve(response.data);
        },
        errCallback);

        return deferred.promise;
    }

    creditCardService.getSecretPhrase = function (phrase) {

        var deferred = $q.defer();
        var errCallback = function (err) { deferred.reject(err); };

        $http.defaults.headers.post['Content-Type'] = 'application/json';
        $http.get(Config.baseURI + '/v2/store-credit-card/secret-phrase/'+ phrase).then(function (response) {
            deferred.resolve(response);
        },
        errCallback);

        return deferred.promise;
    }

    return creditCardService;

}]);
'use strict';
accountsApp.factory('smsService', ['$http', '$q', '$sessionStorage', 'Config', function ($http, $q, $sessionStorage, Config) {

    var smsService = {};

    smsService.resetAccountToken = function (email, document, urlBack) {

        var deferred = $q.defer();
        var errCallback = function (err) { deferred.reject(err); };

        var headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
        var data = '';

        if (typeof (email) != 'undefined' && email != '')
            data += 'email=' + email + '&';

        if (typeof (document) != 'undefined' && document != '')
            data += 'document=' + document + '&';

        if (typeof(urlBack) != 'undefined' && urlBack != '')
            data += 'url_back=' + urlBack;

        $http.post(Config.baseURI + '/v2/member/password-reset/sms', data, headers).then(function (response) {
            deferred.resolve(response.data);
        },
            errCallback);

        return deferred.promise;
    };

    smsService.resetAccountValidate = function (token, smsCode) {

        var deferred = $q.defer();
        var errCallback = function (err) { deferred.reject(err); };

        var headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
        var data = 'grant_type=reset_password_sms' +
            '&reset_token=' + token +
            '&sms_code=' + smsCode +
            '&client_id=' + Config.clientId;

        $http.post(Config.baseURI + '/token', data, headers).then(function (response) {

            deferred.resolve(response.data);
        },
            errCallback);

        return deferred.promise;
    };

    smsService.resetAccountChange = function (newEmail, newPassword) {

        var deferred = $q.defer();
        var errCallback = function (err) { deferred.reject(err); };

        var data =
        {
            'email_new': newEmail,
            'password_new': newPassword
        };

        var config = { headers: { 'Content-Type': 'application/json;charset=UTF-8' } };

        var route = '/v2/member/reset-account';
        $http.post(Config.baseURI + route, data, config).then(function (response) {
            deferred.resolve(response.data);
        },
            errCallback);

        return deferred.promise;
    };

    return smsService;
}]);
'use strict';
accountsApp.factory('storeService', ['$http', '$q', 'Config', function ($http, $q, $config) {

    var storeService = {};

    storeService.getStore = function (code) {

        var deferred = $q.defer();
        var errCallback = function (err) {
            delete $sessionStorage.AuthToken;
            deferred.reject(err);
        };

        $http.get($config.baseURI + '/store/' + code).then(function (response) {
            deferred.resolve(response.data);
        },
        errCallback);

        return deferred.promise;
    }

    return storeService;

}]);
'use strict';
accountsApp
    .controller('appInfoController', AppInfoController)
    .directive('appInfo', AppInfoDirective);

AppInfoController.$inject = ['$scope', '$routeParams', 'applicationService'];

function AppInfoController($scope, $routeParams, applicationService) {
    $scope.init = init;
    $scope.isLoaded = false;
    $scope.infoApp = {};

    function init() {
        applicationService.info($routeParams.application).then(function (response) {
            $scope.infoApp = response;
            $scope.isLoaded = true;
        });
    }
};


function AppInfoDirective() {
    return {
        templateUrl: 'app/directives/app-info.html',
        controller: AppInfoController
    };
};
'use strict';
accountsApp.controller('changeController', ['$scope', '$sessionStorage', '$routeParams', '$timeout', 'authService',
    function ($scope, $sessionStorage, $routeParams, $timeout, authService) {

    $scope.isValid = false;
    $scope.isLoaded = false;
    $scope.displayed = null;
    $scope.message = null;
    $scope.messageClass = null;
    $scope.password = null;
    $scope.passwordConf = null;
    $scope.passwordNew = null;
    $scope.clientAppLogo = null;
    $scope.showChangePasswordMessage = null;

    $scope.messages = {
        'invalid_token': {
            text: 'Esse link de alteração de senha é inválido, por favor tente novamente.',
            cssClass: 'alert-danger'
        },
        'locked_member': {
            text: 'Seu usuário está bloqueado temporiariamente por tentativas sucessivas de login inválidas.',
            cssClass: 'alert-danger'
        },
        'success': {
            text: 'Sua senha foi alterada com sucesso.',
            cssClass: 'alert-success'
        },
        'fail': {
            text: 'Ocorreu algum problema durante a alteração de sua senha. Por favor, tente novamente.',
            cssClass: 'alert-danger'
        }
    };

    $scope.showMessage = function (messageId) {

        var messageObject = $scope.messages[messageId];
        $scope.messageClass = messageObject.cssClass;
        $scope.message = messageObject.text;
        $scope.displayed = 'message';
    };

    $scope.init = function () {

        authService.changePasswordToken($routeParams.token).then(function (response) {
            $scope.isValid = true;
            $scope.displayed = 'form';
            $scope.isLoaded = true;
            $scope.clientAppLogo = response.client_logo_url;
            $scope.showChangePasswordMessage = response.change_password_message;
        },
        function (err) {
            $scope.isValid = false;
            $scope.showMessage('invalid_token');
            $scope.isLoaded = true;

            delete $sessionStorage.AuthToken;
        });
    };

    $scope.changePassword = function () {
        authService.changePassword($scope.password, $scope.passwordNew).then(function (response) {
            $scope.showMessage('success');

            if($sessionStorage.AuthToken.url_back) {
                var urlBack = $sessionStorage.AuthToken.url_back;
                $timeout(function () { window.location.href = decodeURIComponent(urlBack); }, 1500);
            }

            delete $sessionStorage.AuthToken;
        },
        function (err) {

            if (err) {

                err.Message = err.Message ? err.Message : (err.data ? err.data.Message : null);

                if(err.Message) {
                    if (err.Message == 'invalid_password') {
                        $scope.pwdForm.password.$setValidity("invalid_password", false);
                    }
                    else if (err.Message == 'locked_member') {
                        delete $sessionStorage.AuthToken;
                        $scope.showMessage('locked_member');
                    }
                }
            }
            else {
                $scope.showMessage('fail');
            }
        });
    };

    $scope.setPasswordValidity = function () {
        $scope.pwdForm.password.$setValidity("invalid_password", true);
    };

}]);
'use strict';
accountsApp.controller('creditCardController', ['$scope', '$routeParams', '$sessionStorage', '$location', 'authService', 'creditCardService',
    function ($scope, $routeParams, $sessionStorage, $location, authService, creditCardService) {

        $scope.token;
        $scope.creditcard = {};
        $scope.isLoaded = false;
        $scope.visibleMessage = null;
        $scope.message = null;
        $scope.messageClass = null;
        $scope.phrase = null;
        $scope.invalidCreditCardBrand = '';

        $scope.getSecretPhrase = function () {
            creditCardService.getSecretPhrase($routeParams.phrase).then(function (response) {
                $scope.phrase = response.data.content;
            });
        };

        $scope.validateCreditCard = function (data) {

            if($scope.creditcard != null && $scope.creditcard.number != ''){

                $('#credit-card-number').validateCreditCard(function (result) {

                    if(result.card_type != null && result.card_type.name != 'mastercard' && result.card_type.name != 'visa' && result.card_type.name != 'amex'
                    && result.card_type.name != 'diners' && result.card_type.name != 'elo' && result.card_type.name != 'hipercard'){
                        $scope.invalidCreditCardBrand = 'Cartão de crédito inválido ou bandeira não aceita.';
                        $scope.creditCardForm.number.$error = { invalid_credit_card_brand: true };
                        $scope.creditCardForm.number.$invalid = { invalid_credit_card_brand: true };
                    } else if (result.card_type == null) {
                        $scope.invalidCreditCardBrand = 'Cartão de crédito inválido ou bandeira não aceita.';
                        $scope.creditCardForm.number.$error = { invalid_credit_card_brand: true };
                        $scope.creditCardForm.number.$invalid = { invalid_credit_card_brand: true };
                    } else {
                        $scope.invalidCreditCardBrand = '';
                        $scope.creditCardForm.number.$error = false;
                        $scope.creditCardForm.number.$invalid = false;
                    }
                });
            } else {
                $scope.invalidCreditCardBrand = '';
            }
        };

        $scope.save = function () {

            if($scope.invalidCreditCardBrand == ''){

                var expiration_date = $scope.creditcard.expiration_date;
                var vallues = expiration_date.split('/');

                if (expiration_date.length > 0) {
                    $scope.creditcard.expiration_month = vallues[0];
                }

                if (expiration_date.length >= 1) {
                    $scope.creditcard.expiration_year = vallues[1];
                }

                $scope.creditcard.store_code = $routeParams.store;

                creditCardService.save($scope.creditcard).then(function (response) {

                    $scope.messageClass = "alert-success";
                    $scope.message = 'Seus dados foram enviados com sucesso.';
                    $scope.visibleMessage = true;
                    $scope.isLoaded = true;
                    $scope.creditcard = {};
                    $scope.creditCardForm.$setUntouched();
                    $scope.creditCardForm.$setPristine();
                },
                function (err) {

                    $scope.messageClass = "alert-danger";
                    $scope.message = err.data.messages[0].text;
                    $scope.visibleMessage = true;
                    $scope.isLoaded = true;
                });
            } else {
                $scope.messageClass = "alert-danger";
                $scope.message = "Informe um cartão de crédito válido";
                $scope.visibleMessage = true;
                $scope.isLoaded = true;
            }
        };


        $scope.init = function () {
            if (!$routeParams.store) {
                $location.path("notfound");
            }
            else {
                if (!$sessionStorage.AuthToken) {
                    authService.getClientCredentialToken().then(function (response) {
                        if (typeof (response.access_token) !== "undefined" && response.access_token != "") {

                            $scope.getSecretPhrase();
                            $scope.isLoaded = true;
                        }
                    },
                    function (err) {
                        $scope.isLoaded = false;
                    });
                }
                else {
                    $scope.getSecretPhrase();
                    $scope.isLoaded = true;
                }
            }
        };
    }]);
'use strict';
accountsApp.controller('importNotificationController', ['$scope', '$routeParams', 'storeService', function ($scope, $routeParams, storeService) {

    $scope.isValid = false;
    $scope.isLoaded = false;
    $scope.storeLogo = null;
    $scope.storeName = null;

    $scope.init = function () {

        if ($routeParams.store) {

            storeService.getStore($routeParams.store).then(function (response) {

                $scope.storeLogo = response.content.logo;
                $scope.storeName = response.content.name;

                $scope.isValid = true;
                
            });
        } 

        $scope.isLoaded = true;

    };

}]);
'use strict';
accountsApp.controller('loginController', ['$scope', '$sessionStorage', '$routeParams', '$timeout', '$location', '$window', 'authService',
    function ($scope, $sessionStorage, $routeParams, $timeout, $location, $window, authService) {

        $scope.isLoaded = false;
        $scope.visibleMessage = null;
        $scope.message = null;
        $scope.messageClass = null;
        $scope.user = null
        $scope.password = null;
        

        $scope.messages = {
            'locked_member': {
                text: 'Seu usuário está bloqueado temporiariamente por tentativas sucessivas de login inválidas.',
                cssClass: 'alert-danger'
            },
            'success': {
                text: 'Sua senha foi alterada com sucesso.',
                cssClass: 'alert-success'
            },
            'invalid_grant': {
                text: 'Usuário e / ou senha inválidos',
                cssClass: 'alert-danger'
            }
        };

        $scope.showMessage = function (messageId) {

            var messageObject = $scope.messages[messageId];

            $scope.messageClass = messageObject.cssClass;
            $scope.message = messageObject.text;
            $scope.visibleMessage = true;
        };

        $scope.doLogin = function () {
            authService.login($scope.user, $scope.password).then(function (response) {

                var ub = $sessionStorage.urlBack;

                if (ub != null) {

                    authService.transferToken(response.access_token).then(function (responseTT) {

                        delete $sessionStorage.urlBack;
                        delete $sessionStorage.AuthToken;
                        delete $sessionStorage.applications;

                        $window.location.href = ub + responseTT.content.transfer_token;
                    });
                }
                else {
                    $location.path("notfound");
                }
            },
            function (err) {

                $scope.showMessage(err.data.error);
                $scope.isLoaded = true;
            });
        };

        $scope.getUrlBack = function () {
            var ub = $location.search().ub;

            if (typeof (ub) !== "undefined") {
                $sessionStorage.urlBack = ub;
                $location.search({});
                delete $sessionStorage.applications;
            } else if ($sessionStorage.urlBack == null) {
                delete $sessionStorage.applications;
                $location.path("notfound");
            }
        };

        $scope.lostPassword = function () {
            $location.path("request-recovery");
        };

        $scope.init = function () {
            $scope.getUrlBack();
            $scope.displayed = 'form';
            $scope.isLoaded = true;
        };

    }]);
'use strict';
accountsApp.controller('notfoundController', ['$scope', 'authService', function ($scope, authService) {

}]);
'use strict';
accountsApp.controller('recoveryController', ['$scope', '$sessionStorage', '$routeParams', '$location', '$window', '$timeout', 'authService', function ($scope, $sessionStorage, $routeParams, $location, $window, $timeout, authService) {

    $scope.isValid = false;
    $scope.isLoaded = false;
    $scope.displayed = null;
    $scope.message = null;
    $scope.messageClass = null;
    $scope.password = null;
    $scope.passwordConf = null;
    $scope.clientAppLogo = null;
    $scope.isChanged = false;

    $scope.messages = {
        'invalid_token': {
            text: 'Esse link de recuperação de senha é inválido. Caso tenha solicitado a recuperação de senha mais de uma vez, pode ser que há um novo link válido em seu email.',
            cssClass: 'alert-danger'
        },
        'success': {
            text: 'Sua senha foi alterada com sucesso.',
            cssClass: 'alert-success'
        },
        'fail': {
            text: 'Ocorreu algum problema durante a alteração de sua senha. Por favor, tente novamente.',
            cssClass: 'alert-danger'
        }
    };

    $scope.showMessage = function (messageId) {

        var messageObject = $scope.messages[messageId];
        $scope.messageClass = messageObject.cssClass;
        $scope.message = messageObject.text;
        $scope.displayed = 'message';
    };

    $scope.init = function () {

        authService.resetPasswordToken($routeParams.token).then(function (response) {

            if ($routeParams.ub) {
                $sessionStorage.urlBack = $routeParams.ub;
                $location.search({});
            }

            $scope.isValid = true;
            $scope.displayed = 'form';
            $scope.isLoaded = true;
            $scope.clientAppLogo = response.client_logo_url;
        },
        function (err) {
            $scope.isValid = false;
            $scope.showMessage('invalid_token');
            $scope.isLoaded = true;

            delete $sessionStorage.AuthToken;
        });
    };

    $scope.changePassword = function () {
        $scope.isChanged = true;

        var isCustomerImport = $location.url().indexOf('new-store') > -1;

        var ub = $sessionStorage.urlBack;

        if (typeof (ub) == "undefined") {
            ub = '';
        }

        authService.resetPassword($scope.password, isCustomerImport).then(function (response) {
            $scope.showMessage('success');
            delete $sessionStorage.AuthToken;

            if (ub != '') {
                delete $sessionStorage.urlBack;
                delete $sessionStorage.applications;

                ub = ub.indexOf('http') > -1 ? ub : 'http://' + ub;
                $timeout(function () { $window.location.href = ub }, 5000);
            }
        },
        function (err) {
            $scope.showMessage('fail');
            $scope.isChanged = false;
        });
    };

    $scope.submit = function () {

        if ($scope["pwdForm"].$invalid) {
            angular.forEach($scope["pwdForm"].$error, function (field) {
                angular.forEach(field, function (errorField) {
                    errorField.$setTouched();
                })
            });
        }
    };

}]);
'use strict';
accountsApp.controller('requestRecoveryController', ['$scope', '$routeParams', '$timeout', '$location', '$sessionStorage', '$window', 'authService',
    function ($scope, $routeParams, $timeout, $location, $sessionStorage, $window, authService) {

        $scope.isLoaded = false;
        $scope.visibleMessage = null;
        $scope.message = null;
        $scope.messageClass = null;
        $scope.email = null;
        $scope.applicationHtmlContent = null;

        $scope.messages = {
            'locked_member': {
                text: 'Seu usuário está bloqueado temporiariamente por tentativas sucessivas de login inválidas.',
                cssClass: 'alert-danger'
            },
            'success': {
                text: 'Solicitação enviada com sucesso! Você receberá uma solicitação de troca de senha no seu e-mail.',
                cssClass: 'alert-success'
            },
            'invalid_grant': {
                text: 'Usuário e / ou senha inválidos',
                cssClass: 'alert-danger'
            }
        };

        $scope.showMessage = function (messageId) {


            var messageObject = $scope.messages[messageId];

            if (messageObject) {

                $scope.messageClass = messageObject.cssClass;
                $scope.message = messageObject.text;

            }  else {
                $scope.messageClass = 'alert-danger';
                $scope.message = messageId;
            }

            $scope.visibleMessage = true;
        };

        $scope.doRequestRecovery = function () {

            var ub = $sessionStorage.urlBack;

            if (typeof (ub) == "undefined") {
                ub = '';
            }

            authService.resetPasswordEmail($scope.email, ub).then(function (response) {

                $scope.email = "";
                $scope.requestRecoveryForm.email.$touched = false;
                
                
                $scope.showMessage(response.messages[0].type.toLowerCase());

                if (ub != '') {
                    delete $sessionStorage.urlBack;
                }
            },
            function (err) {

                console.log(err);

                if (err.data.error) {
                    $scope.showMessage(err.data.error);
                } else {
                    $scope.showMessage(err.data.messages[0].text);
                }
                $scope.isLoaded = true;
            });

        };

        $scope.login = function () {
            $location.path("login");
        };

        $scope.lostAccount = function () {
            $location.path("sms-recovery");
        };

        $scope.init = function () {

            authService.getClientCredentialToken().then(function (response) {

                if (typeof (response.access_token) !== "undefined" && response.access_token != "") {

                    if ($routeParams.ub) {
                        $sessionStorage.urlBack = $routeParams.ub;
                        $location.search({});
                    }

                    $scope.displayed = 'form';
                    $scope.isLoaded = true;
                }
                else {
                    $location.path("notfound");
                }
            },
            function (err) {

                $scope.showMessage(err.data.error);
                $scope.isLoaded = true;
            });
        };

    }]);
'use strict';
accountsApp.controller('smsChangeController', ['$scope', '$sessionStorage', '$routeParams', '$location', '$window', '$timeout',
    'authService', 'smsService', 'SystemMessages',
    function ($scope, $sessionStorage, $routeParams, $location, $window, $timeout, authService, smsService, SystemMessages) {

        $scope.isLoaded = false;
        $scope.message = null;
        $scope.messageClass = null;
        $scope.systemMessages = SystemMessages;
        $scope.showFormRecovery = true;

        $scope.showMessage = function (msgErro) {
            var msgObj = SystemMessages[msgErro];
            if (typeof(msgObj) == 'undefined' && msgErro.messages) {
                if (msgErro.messages.length > 0) {
                    msgObj = {
                        text: msgErro.messages[0].text,
                        css: 'alert-danger'
                    };
                }
            } else if (typeof(msgObj) == 'undefined' && msgErro.Message) {
                msgObj = {
                    text: msgErro.Message,
                    css: 'alert-danger'
                };
            }

            if (typeof (msgObj) != 'undefined') {
                $scope.message = msgObj.text;
                $scope.messageClass = msgObj.css;
                $scope.visibleMessage = 'message';
            }
        };

        $scope.init = function () {

        };

        $scope.login = function () {
            $location.path("login");
        };

        $scope.submit = function () {
            console.log('submit');
            if ($scope.email != $scope.emailnew) {
                console.log('email_different');
                $scope.showMessage('email_different');
                return false;
            }

            if ($scope.password != $scope.passwordnew) {
                console.log('password_different');
                $scope.showMessage('password_different');
                return false;
            }

            smsService.resetAccountChange($scope.emailnew, $scope.passwordnew).then(function (response) {
                $scope.showMessage('success');
                $scope.showFormRecovery = false;

                delete $sessionStorage.AuthToken;

                var ub = $sessionStorage.urlBack;

                if (typeof(ub) != "undefined") {
                    delete $sessionStorage.urlBack;
                    delete $sessionStorage.applications;

                    ub = ub.indexOf('http') > -1 ? ub : 'http://' + ub;
                    $timeout(function () { $window.location.href = ub }, 5000);
                }
            },
                function (err) {
                    if (err.status == 401)
                        $location.path("login");

                    if (err.data && err.data.error)
                        $scope.showMessage(err.data.error);
                    else
                        $scope.showMessage(err.data);
                });
        };

    }]);
'use strict';
accountsApp.controller('smsRecoveryController', ['$scope', '$sessionStorage', '$routeParams', '$location', '$window', '$timeout', 'authService', 'smsService', 'SystemMessages',
    function ($scope, $sessionStorage, $routeParams, $location, $window, $timeout, authService, smsService, SystemMessages) {

        $scope.isLoaded = false;
        $scope.displayed = null;
        $scope.message = null;
        $scope.messageClass = null;

        $scope.showMessage = function (msgErro) {
            var msgObj = SystemMessages[msgErro];
            if (typeof (msgObj) == 'undefined' && msgErro.messages) {
                if (msgErro.messages.length > 0) {
                    msgObj = {
                        text: msgErro.messages[0].text,
                        css: 'alert-danger'
                    };
                }
            } else if (typeof (msgObj) == 'undefined' && msgErro.Message) {
                msgObj = {
                    text: msgErro.Message,
                    css: 'alert-danger'
                };
            }

            if (typeof (msgObj) != 'undefined') {
                $scope.message = msgObj.text;
                $scope.messageClass = msgObj.css;
                $scope.visibleMessage = 'message';
            }
        };

        $scope.init = function () {

            authService.getClientCredentialToken().then(function (response) {

                if (typeof(response.access_token) !== "undefined" && response.access_token != "") {

                    if ($routeParams.ub) {
                        $sessionStorage.urlBack = $routeParams.ub;
                        $sessionStorage.$apply();
                    }

                    $scope.displayed = 'form';
                    $scope.isLoaded = true;
                }
                else {
                    $location.path("notfound");
                }
            },
                function (err) {

                    $scope.showMessage(err.data.error);
                    $scope.isLoaded = true;
                });
        };

        $scope.login = function () {
            $location.path("login");
        };

        $scope.submit = function () {
            if ($scope.email == "" && $scope.document == "") {
                showMessage('email_document_required');
                return false;
            }

            var ub = $sessionStorage.urlBack;
            if (typeof (ub) == "undefined") {
                ub = '';
            }

            smsService.resetAccountToken($scope.email, $scope.document, ub).then(function (response) {
                $scope.showMessage('success');

                $scope.smsUser = {
                    email: $scope.email,
                    document: $scope.document
                };

                $sessionStorage.smsUser = $scope.smsUser;
                $sessionStorage.$apply();

                $window.location.href = response.content.token_validation_url;
            },
                function (err) {

                    if (err.status == 401)
                        $location.path("login");

                    if (err.data && err.data.error)
                        $scope.showMessage(err.data.error);
                    else
                        $scope.showMessage(err.data);

                });
        };

    }]);
'use strict';
accountsApp.controller('smsValidateController', ['$scope', '$sessionStorage', '$routeParams', '$location', '$window', '$timeout', 'authService', 'smsService', 'SystemMessages',
    function ($scope, $sessionStorage, $routeParams, $location, $window, $timeout, authService, smsService, SystemMessages) {

    $scope.isLoaded = false;
    $scope.displayed = null;
    $scope.message = null;
    $scope.messageClass = null;

    $scope.showMessage = function (msgErro) {
        var msgObj = SystemMessages[msgErro];
        if (typeof (msgObj) == 'undefined' && msgErro.messages) {
            if (msgErro.messages.length > 0) {
                msgObj = {
                    text: msgErro.messages[0].text,
                    css: 'alert-danger'
                };
            }
        } else if (typeof (msgObj) == 'undefined' && msgErro.Message) {
            msgObj = {
                text: msgErro.Message,
                css: 'alert-danger'
            };
        }

        if (typeof (msgObj) != 'undefined') {
            $scope.message = msgObj.text;
            $scope.messageClass = msgObj.css;
            $scope.visibleMessage = 'message';
        }
    };

    $scope.init = function () {
        if ($routeParams.ub) {
            $sessionStorage.urlBack = $routeParams.ub;
            $sessionStorage.$apply();
        }
    };

    $scope.newCode = function () {
        var user = $sessionStorage.smsUser;

        if (typeof(user) == "undefined") {
            $location.path("sms-recovery");
            return;
        }

        var ub = $sessionStorage.urlBack;
        if (typeof(ub) == "undefined") {
            ub = '';
        }

        smsService.resetAccountToken(user.email, user.document, ub).then(function (response) {
            $scope.showMessage('success_resend');

            $timeout(function () { $window.location.href = response.content.token_validation_url }, 1300);
        },
            function (err) {
                if (err.data && err.data.error)
                    $scope.showMessage(err.data.error);
                else
                    $scope.showMessage(err.data);
            });

    };

    $scope.submit = function () {
        if ($scope.code == "") {
            $scope.messageClass = 'alert-danger';
            $scope.message = "É necessário preencher o campo com o código recebido no celular.";
            $scope.visibleMessage = 'message';

            return false;
        }

        smsService.resetAccountValidate($routeParams.token, $scope.code).then(function (response) {
            $scope.showMessage('success');

            $sessionStorage.AuthToken = response; 
            $sessionStorage.$apply();

            $location.path("sms-change");
        },
            function (err) {
                if (err.status == 401)
                    $location.path("login");

                if (err.data && err.data.error)
                    $scope.showMessage(err.data.error);
                else
                    $scope.showMessage(err.data);

            });
    };

}]);